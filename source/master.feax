languagesystem DFLT dflt;
languagesystem knd2 dflt;

# Also in GDL
@Cons = [@cno_sub ra]; # @Akhands
@SubCons = [@c_sub ra.below];

# GSUB

# For debugging the string "RenderingUnknown" will be rendered as "RenderingOpenType"
# if the app is using OpenType to render the text.
lookup FontCheck_Unknow {
  lookupflag IgnoreMarks;
    sub [U n k o w ] by [O p e T y];
} FontCheck_Unknow;

lookup FontCheck_n {
  lookupflag IgnoreMarks;
    sub n by p e;
} FontCheck_n;

lookup FontCheck {
  lookupflag IgnoreMarks;
    sub [R] e n d e r i n g
      U' lookup FontCheck_Unknow
      n' lookup FontCheck_Unknow
      k' lookup FontCheck_Unknow
      n'
      o' lookup FontCheck_Unknow
      w' lookup FontCheck_Unknow
      n' lookup FontCheck_n;
} FontCheck;

lookup Akhands {
  lookupflag IgnoreMarks;
    sub ka virama ssa by ka_ssa;
    sub ja virama nya by ja_nya;
} Akhands;

#lookup SpecialRa {
#  lookupflag 0;
#    sub virama ra by ra.below;
#} SpecialRa;

lookup RephForm {
  lookupflag 0;
    sub ra virama by shortrr;
} RephForm;

lookup BelowFormOfCons {
  lookupflag 0;
    sub virama @Cons by @SubCons;
} BelowFormOfCons;

lookup PreBaseLig {
  lookupflag 0;
    # custom ligatures
    sub nya umatra by nya_umatra;
    sub lla umatra by lla_umatra;
} PreBaseLig;

lookup AboveMatras {
  lookupflag 0;
    sub @cligno_aamatra aamatra by @clig_aamatra;
    sub @cno_imathra imatra by @c_imathra;
    sub @cligno_ematra ematra by @clig_ematra;
    sub @cligno_aumatra aumatra by @clig_aumatra;
} AboveMatras;

lookup Omatra {
  lookupflag 0;
    sub @cno_Obase' uumatra by @c_Obase;
} Omatra;

lookup SubLigatures {
  lookupflag 0;
    # general ligatures
    sub ta.sub ya.sub by ta_ya.below;
    sub ta.sub va.sub by ta_va.below;
    sub ka.sub rvocalicmatra by ka_rvocalicmatra.below;
    sub ta.sub rvocalicmatra by ta_rvocalicmatra.below;
    sub ta.sub ailengthmark by ta_ailengthmark.below;
    sub ra.below ailengthmark by ra_ailengthmark.below;
    sub sha.imathra ra.below by sha_ra.imathra;
} SubLigatures;

lookup Reph2RaSub {
  lookupflag 0;
    sub shortrr by ra.below;
} Reph2RaSub;

lookup UndoReph {
  lookupflag 0;
    # undo reph formation for ra sub ra, maybe followed by a matra
    sub ra shortrr' lookup Reph2RaSub;
    sub ra_aamatra shortrr' lookup Reph2RaSub;
    sub ra.imathra shortrr' lookup Reph2RaSub; # imatra
    sub ra.imathra lengthmark shortrr' lookup Reph2RaSub; # iimatra
    sub ra umatra shortrr' lookup Reph2RaSub;
    sub ra uumatra shortrr' lookup Reph2RaSub;
    sub ra rvocalicmatra shortrr' lookup Reph2RaSub;
    sub ra rrvocalicmatra shortrr' lookup Reph2RaSub;
    sub ra_ematra shortrr' lookup Reph2RaSub;
    sub ra_ematra lengthmark shortrr' lookup Reph2RaSub; # eematra
    sub ra_ematra ailengthmark shortrr' lookup Reph2RaSub; # aimatra
    sub ra_ematra uumatra shortrr' lookup Reph2RaSub; # omatra
    sub ra_ematra uumatra lengthmark shortrr' lookup Reph2RaSub; # oomatra
    sub ra_aumatra shortrr' lookup Reph2RaSub; # aumatra
    sub ra lvocalicmatra shortrr' lookup Reph2RaSub;
    sub ra llvocalicmatra shortrr' lookup Reph2RaSub;
} UndoReph;

lookup SubLigature {
  lookupflag 0;
    sub ailengthmark ra.below by ra_ailengthmark.below;
} SubLigature;

lookup Length2RaSub {
  lookupflag 0;
    sub lengthmark by ra.below;
} Length2RaSub;

lookup RaSub2Length {
  lookupflag 0;
    sub ra.below by lengthmark;
} RaSub2Length;

lookup SwapLengthAndRaSub {
  lookupflag 0;
    sub lengthmark' lookup Length2RaSub ra.below' lookup RaSub2Length;
} SwapLengthAndRaSub;

lookup PostBaseSub {
  lookupflag 0;
    @ConsTakesUnderUMatra = [pa pha va];
    sub @ConsTakesUnderUMatra umatra' by umatra.large;
    sub @ConsTakesUnderUMatra uumatra' by uumatra.large;

    # Special case for omarta (which also covers oomatra)
    # Since omatra = ematra + uumatra,
    # a ligature that ends with ematra,
    # followed by a uumatra,
    # is an omatra.
    @LigTakesUnderUMatra = [pa_ematra pha_ematra va_ematra];
    sub @LigTakesUnderUMatra uumatra' by uumatra.large;

    # special handling of ra sub forms
    sub @SubCons ra.below' by ra.below.subcons;
    sub @Akhands ra.below' by ra.below.subcons;
    sub @TakesLargeRaSubCons ra.below' by ra.below.large;

    # The following will match even if a ZWJ is between the ra and the ra.below
    sub ra ra.below' by ra.below.ra;

    # A ZWNJ has to be explicitly matched
    sub ra zwnj ra.below' by ra.below.ra;

    sub ra.imathra ra.below' by ra.below.ra;

    # Matras (that may be in a ligature with a consonant) that do not have decompositions
    @AtomicMatras = [@clig_aamatra imatra umatra uumatra rvocalicmatra rrvocalicmatra @clig_ematra @clig_aumatra lvocalicmatra llvocalicmatra];

    # Non-atomic vowels will be decomposed, and the characters in the resulting
    # decomposition that are atomic vowels (or were atomic to being with)
    # will be reordered past sub forms to be next to the consonant they need
    # to modify.
    sub @AtomicMatras ra.below' by ra.below.ra;

    # The virama does not get reordered (like the vowels above).
    # Therefore, we match a different order here.
    sub ra.below' virama by ra.below.ra;
    sub ra.below' @c_sub virama by ra.below.ra;
} PostBaseSub;

lookup HalantBaseForms {
  lookupflag IgnoreMarks;
    sub @cligno_virama' virama' by @clig_virama;

    # Matches an initial ra that is not turned in a reph.
    sub @cligno_virama' zwj' virama' by @clig_virama;
} HalantBaseForms;

feature ccmp {
    lookup FontCheck;
} ccmp;

feature akhn {
    lookup Akhands;
    # lookup SpecialRa;
} akhn;

feature rphf {
  lookup RephForm;
} rphf;

feature blwf {
  lookup BelowFormOfCons;
} blwf;

feature pres {
    lookup PreBaseLig;
} pres;

feature abvs {
    lookup AboveMatras;
    lookup Omatra;
} abvs;

feature blws {
    lookup SubLigatures;
} blws;

feature psts {
    lookup UndoReph;
    lookup SubLigature;
    lookup SwapLengthAndRaSub;
    lookup PostBaseSub;
} psts;

feature haln {
    lookup HalantBaseForms;
} haln;

# GPOS

lookup KernPairs {
    kernpairs;
} KernPairs;

lookup Nuktas {
  lookupflag 0;
    pos base @N mark @_N;
} Nuktas;

lookup SubForms {
  lookupflag 0;
    pos base @S mark @_S;
} SubForms;

lookup SubSubForms {
  lookupflag 0;
    pos mark @S_MarkBase mark @_S;
} SubSubForms;

# In the next two lookups (AiMove/AiRight) the ailengthmark is shifted
# to the right. This kerns well with the following base glyph, and also
# provides a space after the previous sub form.

# The rrvocalicmatra and rvocalicmatra glyphs need the same space after
# a sub form, but not shifted to the right like the ailengthmark since
# that would bring them too close to the following base glyph. So we add
# more advance width to the sub form if followed by rrvocalicmatra/rvocalicmatra.

@SubLike = [@c_sub ra.below.ra];

lookup WrapMatras {
  lookupflag 0;
    do
    # One sub form:
    # The wrap matras has a negative LSB, which is fine as long as the
    # previous glyph is not below the baseline.
    let one_ai = -MINx("ailengthmark");
    let one_rr = -MINx("rrvocalicmatra") + 50;
    let one_r = -MINx("rvocalicmatra") + 50;

    for s = @SubLike;
    # Two sub forms:
    # The second sub form gets positioned, thus losing its advance width.
    # So we add the width (not the advance width, as sub forms tend to
    # under hang the previous glyph).
    let two_ai = MAXx(s) - MINx(s);
    let two = two_ai + 50;

    {
      pos $s $s' $two_ai ailengthmark;
      pos $s $s' $two rrvocalicmatra;
      pos $s $s' $two rvocalicmatra;
      pos $s' $one_ai ailengthmark;
      pos $s' $one_rr rrvocalicmatra;
      pos $s' $one_r rvocalicmatra;
    }
} WrapMatras;

lookup AiMove {
  lookupflag 0;
    pos ailengthmark <50 0 0 0>;
} AiMove;

lookup AiRight {
  lookupflag 0;
    pos @SubLike ailengthmark' lookup AiMove;
} AiRight;

feature dist {
    lookup KernPairs;
} dist;

feature blwm {
    lookup Nuktas;
    lookup SubForms;
    lookup SubSubForms;
    lookup WrapMatras;
    lookup AiRight;
} blwm;

# GDEF

table GDEF {
  GlyphClassDef @GDEF_bases, , @GDEF_marks, ;
} GDEF;
