languagesystem DFLT dflt;
languagesystem knd2 dflt;

@Cons = [@cno_sub ra]; # @Akhands
@SubCons = [@c_sub ra.below];
@AtomicVowels = [aamatra imatra umatra uumatra rvocalicmatra rrvocalicmatra ematra aumatra];


# GSUB

# For debugging the string "RenderingUnknown" will be rendered as "RenderingOpenType"
# if the app is using OpenType to render the text.
lookup FontCheck_Unknow {
  lookupflag IgnoreMarks;
    sub [U n k o w ] by [O p e T y];
} FontCheck_Unknow;

lookup FontCheck_n {
  lookupflag IgnoreMarks;
    sub n by p e;
} FontCheck_n;

lookup FontCheck {
  lookupflag IgnoreMarks;
    sub [R] e n d e r i n g
      U' lookup FontCheck_Unknow
      n' lookup FontCheck_Unknow
      k' lookup FontCheck_Unknow
      n'
      o' lookup FontCheck_Unknow
      w' lookup FontCheck_Unknow
      n' lookup FontCheck_n;
} FontCheck;

lookup Akhands {
  lookupflag IgnoreMarks;
    sub ka virama ssa by ka_ssa;
    sub ja virama nya by ja_nya;
} Akhands;

#lookup SpecialRa {
#  lookupflag 0;
#    sub virama ra by ra.below;
#} SpecialRa;

lookup RephForm {
  lookupflag 0;
    sub ra virama by shortrr;
} RephForm;

lookup BelowFormOfCons {
  lookupflag 0;
    sub virama @Cons by @SubCons;
} BelowFormOfCons;

lookup MultipleSubstitutionlookup13 {
  lookupflag 0;
    sub \ra by \ra \virama ;
    sub \rra by \rra \virama ;
} MultipleSubstitutionlookup13;

lookup akhnAkhandinKannadalookup0 {
  lookupflag 0;
    sub [\ka \kha \ga \gha \nga \ca \cha \ja \jha \nya \tta \ttha
	\dda \ddha \nna \ta \tha \da \dha \na \pa \pha
	\ba \bha \ma \ya \rra \la \lla \va \sha \ssa
	\sa \ha \fa ] [\virama ] [\ra \rra ]'lookup MultipleSubstitutionlookup13  ;
} akhnAkhandinKannadalookup0;

lookup LigatureSubstitutionlookup14 {
  lookupflag 0;
    sub \ka \virama  by \ka;
    sub \kha \virama  by \kha;
    sub \ga \virama  by \ga;
    sub \gha \virama  by \gha;
    sub \nga \virama  by \nga;
    sub \ca \virama  by \ca;
    sub \cha \virama  by \cha;
    sub \ja \virama  by \ja;
    sub \jha \virama  by \jha;
    sub \nya \virama  by \nya;
    sub \tta \virama  by \tta;
    sub \ttha \virama  by \ttha;
    sub \dda \virama  by \dda;
    sub \ddha \virama  by \ddha;
    sub \nna \virama  by \nna;
    sub \ta \virama  by \ta;
    sub \tha \virama  by \tha;
    sub \da \virama  by \da;
    sub \dha \virama  by \dha;
    sub \na \virama  by \na;
    sub \pa \virama  by \pa;
    sub \pha \virama  by \pha;
    sub \ba \virama  by \ba;
    sub \bha \virama  by \bha;
    sub \ma \virama  by \ma;
    sub \ya \virama  by \ya;
    sub \rra \virama  by \rra;
    sub \la \virama  by \la;
    sub \lla \virama  by \lla;
    sub \va \virama  by \va;
    sub \sha \virama  by \sha;
    sub \ssa \virama  by \ssa;
    sub \sa \virama  by \sa;
    sub \ha \virama  by \ha;
    sub \fa \virama  by \fa;
} LigatureSubstitutionlookup14;

lookup akhnAkhandinKannadalookup1 {
  lookupflag 0;
    sub [\ka \kha \ga \gha \nga \ca \cha \ja \jha \nya \tta \ttha
	\dda \ddha \nna \ta \tha \da \dha \na \pa \pha
	\ba \bha \ma \ya \rra \la \lla \va \sha \ssa
	\sa \ha \fa ]'lookup LigatureSubstitutionlookup14  [\virama ]'lookup LigatureSubstitutionlookup14  [\rra ] ;
    sub [\ka \kha \ga \gha \nga \ca \cha \ja \jha \nya \tta \ttha
	\dda \ddha \nna \ta \tha \da \dha \na \pa \pha
	\ba \bha \ma \ya \rra \la \lla \va \sha \ssa
	\sa \ha \fa ]'lookup LigatureSubstitutionlookup14  [\virama ]'lookup LigatureSubstitutionlookup14  [\ra ] ;
} akhnAkhandinKannadalookup1;

lookup akhnAkhandinKannadalookup6 {
  lookupflag 0;
    sub \sha \imatra \ra \virama  by \sha_ra.imathra;
} akhnAkhandinKannadalookup6;

lookup SingleSubstitutionlookup17 {
  lookupflag 0;
    sub \ma.base by \ma.part ;
    sub \ya.base by \ya.part ;
} SingleSubstitutionlookup17;

lookup abvsAboveBaseSubstitutionsinKannadalookup9 {
  lookupflag 0;
    sub [\ma.base \ya.base \jha.base ]'lookup SingleSubstitutionlookup17  [\ematra ] [\uumatra ] ;
    sub [\ma.base \ya.base \jha.base ]'lookup SingleSubstitutionlookup17  [\rra.sub ] [\ematra ] [\uumatra ] ;
} abvsAboveBaseSubstitutionsinKannadalookup9;

lookup SingleSubstitutionlookup18 {
  lookupflag 0;
    sub \jha.base by \jha.base.mathra ;
    sub \ma.base by \ma.base.mathra ;
    sub \ya.base by \ya.base.mathra ;
} SingleSubstitutionlookup18;

lookup abvsAboveBaseSubstitutionsinKannadalookup10 {
  lookupflag 0;
    sub [\jha.base \ma.base \ya.base ]'lookup SingleSubstitutionlookup18  [\virama ] ;
    sub [\jha.base \ma.base \ya.base ]'lookup SingleSubstitutionlookup18  [\aumatra ] ;
    sub [\jha.base \ma.base \ya.base ]'lookup SingleSubstitutionlookup18  [\aamatra ] ;
} abvsAboveBaseSubstitutionsinKannadalookup10;

lookup abvsAboveBaseSubstitutionsinKannadalookup12 {
  lookupflag 0;
    sub [\pa \pha \va \pa.base \pha.base \va.base ] [\umatra \uumatra ]'  by [\umatra.large \uumatra.large ];
} abvsAboveBaseSubstitutionsinKannadalookup12;

lookup PreBaseSub {
  lookupflag 0;
    # ignore vowels where the matras to base do not go on the base form
    ignore sub jha' @MatraToBase;
    ignore sub ma' @MatraToBase;
    ignore sub ya' @MatraToBase;

    # vowel signs and parts AA, E, AU and haln
    sub @cno_base' @MatraToBase by @c_base;

    # OT shapers will re-order matras next to the base consonant,
    # but not virams, so we have to match the virama (skipping a SubCons) manually.
    sub @cno_base' @SubCons virama by @c_base;
} PreBaseSub;

lookup LargeEmatra {
  lookupflag 0;
    sub @TakesLargeEmatra ematra' by ematra.large;
} LargeEmatra;

lookup ImatraLigature {
  lookupflag 0;
    sub @cno_imathra imatra by @c_imathra;
} ImatraLigature;

lookup BelowBaseSubForRa {
  lookupflag 0;
    ignore sub ra.below ailengthmark' shortrr';
    # undo reph formation in the following case
    sub ailengthmark' shortrr' by ra_ailengthmark.below;

    # related to reph
    sub ra.below' ailengthmark' by ra_ailengthmark.below;
} BelowBaseSubForRa;

lookup BelowBaseSub {
  lookupflag 0;
    # general ligatures
    sub ta.sub ya.sub by ta_ya.below;
    sub ta.sub va.sub by ta_va.below;
  	sub ka.sub rvocalicmatra by ka_rvocalicmatra.below;
	  sub ta.sub rvocalicmatra by ta_rvocalicmatra.below;
    sub ta.sub ailengthmark by ta_ailengthmark.below;

    sub sha.imathra ra.below by sha_ra.imathra;
} BelowBaseSub;

lookup Reph2RaSub {
  lookupflag 0;
    sub shortrr by ra.below;
} Reph2RaSub;

lookup MoreRaSub {
  lookupflag IgnoreMarks;
    # undo reph formation in some cases
    @RaLike = [ra ra.imathra ra.base @AtomicVowels];
    ignore sub ra.below @RaLike shortrr';
    sub @RaLike shortrr' lookup Reph2RaSub;
} MoreRaSub;

lookup Length2RaSub {
  lookupflag 0;
    sub lengthmark by ra.below;
} Length2RaSub;

lookup RaSub2Length {
  lookupflag 0;
    sub ra.below by lengthmark;
} RaSub2Length;

lookup SwapLengthAndRaSub {
  lookupflag 0;
    sub lengthmark' lookup Length2RaSub ra.below' lookup RaSub2Length;
} SwapLengthAndRaSub;

lookup PostBaseSub {
  lookupflag 0;
    sub @TakesUbasedMatra umatra' by umatra.large;
    sub @TakesUbasedMatra uumatra' by uumatra.large;
    sub @TakesUbasedMatra ematra uumatra' by uumatra.large;

    # special handling of ra sub forms
    sub @SubCons ra.below' by ra.below.subcons;
    #sub @Akhands ra.below' by ra.below.subcons;
    sub @TakesLargeRaSubCons ra.below' by ra.below.large;
    sub ra ra.below' by ra.below.ra;
    sub ra.imathra ra.below' by ra.below.ra;
    sub @AtomicVowels ra.below' by ra.below.ra;
} PostBaseSub;

lookup HalantForms {
  lookupflag IgnoreMarks;
    sub @cno_virama' virama' by @c_virama;
} HalantForms;

#feature ccmp {
#    lookup FontCheck;
#} ccmp;

feature akhn {
    lookup Akhands;
    # lookup SpecialRa;
} akhn;

feature rphf {
  lookup RephForm;
} rphf;

feature blwf {
  lookup BelowFormOfCons;
} blwf;

feature pres {
    lookup PreBaseSub;
} pres;

feature abvs {
    lookup LargeEmatra;
    lookup abvsAboveBaseSubstitutionsinKannadalookup9;
    lookup abvsAboveBaseSubstitutionsinKannadalookup10;
    lookup ImatraLigature;
} abvs;

feature blws {
    lookup BelowBaseSubForRa;
    lookup BelowBaseSub;
} blws;

feature psts {
    # lookup abvsAboveBaseSubstitutionsinKannadalookup12;
    lookup MoreRaSub;
    lookup SwapLengthAndRaSub;
    lookup PostBaseSub;
} psts;

feature haln {
    lookup HalantForms;
} haln;


# GPOS

lookup markMarkPositioninglookup6 {
  lookupflag 0;
  markClass [\nukta ] <anchor -905 -600> @Nukta;
  pos base [\avowel \aavowel \ivowel \ovowel \oovowel \ja \ja.base \ja.imathra ] <anchor 400 -50> mark @Nukta;
  pos base [\iivowel ] <anchor 415 -50> mark @Nukta;
  pos base [\uuvowel ] <anchor 650 -50> mark @Nukta;
  pos base [\rvocalicvowel ] <anchor 615 -50> mark @Nukta;
  pos base [\lvocalicvowel ] <anchor 575 -50> mark @Nukta;
  pos base [\lvocalicvowel.part ] <anchor 395 -50> mark @Nukta;
  pos base [\evowel \eevowel \aivowel \auvowel ] <anchor 380 -50> mark @Nukta;
} markMarkPositioninglookup6;

lookup RightSubMove {
  lookupflag 0;
    pos \rvocalicmatra <50 0 0 0>;
    pos \rrvocalicmatra <50 0 0 0>;
    pos \ailengthmark <50 0 0 0>;
} RightSubMove;

lookup SubMove {
  lookupflag 0;
    pos \ka.sub <-100 0 0 0>;
    pos \kha.sub <-100 0 0 0>;
    pos \ga.sub <-100 0 0 0>;
    pos \gha.sub <-100 0 0 0>;
    pos \nga.sub <-100 0 0 0>;
    pos \ca.sub <-100 0 0 0>;
    pos \cha.sub <-100 0 0 0>;
    pos \ja.sub <-100 0 0 0>;
    pos \jha.sub <-100 0 0 0>;
    pos \nya.sub <-100 0 0 0>;
    pos \tta.sub <-100 0 0 0>;
    pos \ttha.sub <-100 0 0 0>;
    pos \dda.sub <-100 0 0 0>;
    pos \ddha.sub <-100 0 0 0>;
    pos \nna.sub <-100 0 0 0>;
    pos \ta.sub <-100 0 0 0>;
    pos \tha.sub <-100 0 0 0>;
    pos \da.sub <-100 0 0 0>;
    pos \dha.sub <-100 0 0 0>;
    pos \na.sub <-100 0 0 0>;
    pos \pa.sub <-100 0 0 0>;
    pos \pha.sub <-100 0 0 0>;
    pos \ba.sub <-100 0 0 0>;
    pos \bha.sub <-100 0 0 0>;
    pos \ma.sub <-100 0 0 0>;
    pos \ya.sub <-150 0 0 0>;
    pos \ra.below.ra <-100 0 0 0>;
    pos \rra.sub <-100 0 0 0>;
    pos \la.sub <-100 0 0 0>;
    pos \lla.sub <-100 0 0 0>;
    pos \va.sub <-100 0 0 0>;
    pos \sha.sub <-100 0 0 0>;
    pos \ssa.sub <-150 75 0 0>;
    pos \sa.sub <-100 0 0 0>;
    pos \ha.sub <-100 0 0 0>;
} SubMove;

lookup blwmBelowBaseMarkinKannadalookup2 {
  lookupflag 0;
    @cc35_match_1 = [\ka.sub \kha.sub \ga.sub \gha.sub \nga.sub \ca.sub \cha.sub
	\ja.sub \jha.sub \nya.sub \tta.sub \ttha.sub \dda.sub
	\ddha.sub \nna.sub \ta.sub \tha.sub \da.sub \dha.sub
	\na.sub \pa.sub \pha.sub \ba.sub \bha.sub \ma.sub
	\ya.sub \rra.sub \la.sub \lla.sub \va.sub \sha.sub
	\ssa.sub \sa.sub \ha.sub \ra.below.ra ];
    @cc35_match_2 = [\rrvocalicmatra \rvocalicmatra \ailengthmark ];
    @cc35_ahead_1 = [\ka.sub \kha.sub \ga.sub \gha.sub \nga.sub \ca.sub \cha.sub
	\ja.sub \jha.sub \nya.sub \tta.sub \ttha.sub \dda.sub
	\ddha.sub \nna.sub \ta.sub \tha.sub \da.sub \dha.sub
	\na.sub \pa.sub \pha.sub \ba.sub \bha.sub \ma.sub
	\ya.sub \rra.sub \la.sub \lla.sub \va.sub \sha.sub
	\ssa.sub \sa.sub \ha.sub \ra.below.ra ];
    @cc35_ahead_2 = [\rrvocalicmatra \rvocalicmatra \ailengthmark ];
    pos @cc35_match_1'lookup SubMove  @cc35_ahead_2 ;
} blwmBelowBaseMarkinKannadalookup2;

lookup blwmBelowBaseMarkinKannadalookup4 {
  lookupflag 0;
    @cc36_match_1 = [\rrvocalicmatra \rvocalicmatra \ailengthmark ];
    @cc36_back_1 = [\rrvocalicmatra \rvocalicmatra \ailengthmark ];
    @cc36_back_2 = [\ka.sub \kha.sub \ga.sub \gha.sub \nga.sub \ca.sub \cha.sub
	\ja.sub \jha.sub \nya.sub \tta.sub \ttha.sub \dda.sub
	\ddha.sub \nna.sub \ta.sub \tha.sub \da.sub \dha.sub
	\na.sub \pa.sub \pha.sub \ba.sub \bha.sub \ma.sub
	\ya.sub \rra.sub \la.sub \lla.sub \va.sub \sha.sub
	\ssa.sub \sa.sub \ha.sub \ra.below.ra ];
    pos @cc36_back_2 @cc36_match_1'lookup RightSubMove  ;
} blwmBelowBaseMarkinKannadalookup4;

lookup Nuktas {
  lookupflag 0;
    pos base @N mark @_N;
} Nuktas;

lookup SubForms {
  lookupflag 0;
    pos base @S mark @_S;
} SubForms;

lookup SubSubForms {
  lookupflag 0;
    pos mark @S mark @_S;
} SubSubForms;

lookup abvsAboveBaseSubstitutionslookup1 {
  lookupflag 0;
  markClass [\inherent ] <anchor -279 540> @V;
  markClass [\ematra ] <anchor -226 535> @V;
  pos base [\jha.base ] <anchor 404 537> mark @V;
  pos base [\ma.base ] <anchor 537 535> mark @V;
  pos base [\ya.base ] <anchor 707 527> mark @V;
} abvsAboveBaseSubstitutionslookup1;

feature mark {

 script DFLT;
     language dflt ;
      lookup markMarkPositioninglookup6;

 script knda;
     language dflt ;
      lookup markMarkPositioninglookup6;

 script latn;
     language dflt ;
      lookup markMarkPositioninglookup6;
} mark;

feature blwm {
    lookup Nuktas;
    lookup SubForms;
    lookup SubSubForms;
      #lookup blwmkshaformation;
      lookup RightSubMove;
      lookup blwmBelowBaseMarkinKannadalookup2;
      lookup blwmBelowBaseMarkinKannadalookup4;
} blwm;

feature abvm {

 script knda;
     language dflt ;
      lookup abvsAboveBaseSubstitutionslookup1;
} abvm;
#Mark attachment classes (defined in GDEF, used in lookupflags)

@GDEF_Simple = [\.null \nonmarkingreturn \space \exclam \quotedbl \numbersign
	\dollar \percent \ampersand \quotesingle \parenleft \parenright \asterisk \plus
	\comma \hyphen \period \slash \zero \one \two \three \four \five \six \seven \eight
	\nine \colon \semicolon \less \equal \greater \question \at \A \B \C \D \E \F \G \H \I \J
	\K \L \M \N \O \P \Q \R \S \T \U \V \W \X \Y \Z \bracketleft \backslash \bracketright
	\asciicircum \underscore \grave \a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t \u
	\v \w \x \y \z \braceleft \bar \braceright \asciitilde \quoteleft \quoteright
	\quotedblleft \quotedblright \makewide \nbsp \anusvara \visarga
	\avowel \aavowel \ivowel \iivowel \uvowel \uuvowel \rvocalicvowel \rvocalicvowel.part \lvocalicvowel \lvocalicvowel.part
	\evowel \eevowel \aivowel \ovowel \oovowel \auvowel \ka.base \ka_rvocalicmatra.below
	\kha.base \ga.base \gha.base \ca.base \cha.base \ja.base
	\jha.base \jha.half.base \jha.part \jha.base.mathra \tta.base
	\ttha.base \dda.base \ddha.base \nna.base \ta.base \ta_ya.below
	\ta_va.below \ta_rvocalicmatra.below \ta_ailengthmark.below \tha.base \da.base
	\dha.base \na.base \pa.base \pha.base \ba.base \bha.base
	\ma.base \ma.base.mathra \ma.part \ya.base \ya.part
	\ya.part.i \ya.base.mathra \ra \ra.base \ra.below
	\ra.below.subcons \ra.below.large \ra_ailengthmark.below \la.base
	\lla.base \va.base \sha.base \ssa.base \sa.base \ha.base \avagraha
	\aamatra \imatra \iimatra \umatra \umatra.large \uumatra \uumatra.large \rvocalicmatra \rrvocalicmatra
	\ematra.large \eematra \aimatra \omatra \omatra.large \oomatra \oomatra.large \aumatra \virama
	\lengthmark \ailengthmark \fa.sub \rrvocalicvowel \llvocalicvowel \zeroknda \oneknda \twoknda \threeknda \fourknda \fiveknda
	\sixknda \sevenknda \eightknda \nineknda \zwj \zwnj \zwsp \wj \ka_ssa
	\ka_ssa.base \nukta.alt
	\exclam.knda \quoteleft.knda \quotedblleft.knda \quoteright.knda
	\quotedblright.knda \parenleft.knda \parenright.knda \comma.knda
	\hyphen.knda \period.knda \slash.knda \colon.knda \semicolon.knda
	\question.knda \danda \dandadbl ];
@GDEF_Ligature = [\shortrr \ka \ka.imathra \ka.sub \kha \kha.imathra
	\kha.sub \ga \ga.imathra \ga.sub \gha \gha.imathra \gha.sub
	\nga \nga.sub \ca \ca.imathra \ca.sub \cha \cha.imathra
	\cha.sub \ja \ja.imathra \ja.sub \jha \jha.imathra \jha.sub
	\nya \nya.sub \tta \tta.imathra \tta.sub \ttha \ttha.imathra
	\ttha.sub \dda \dda.imathra \dda.sub \ddha \ddha.imathra \ddha.sub
	\nna \nna.imathra \nna.sub \ta \ta.imathra \ta.sub \tha
	\tha.imathra \tha.sub \da \da.imathra \da.sub \dha
	\dha.imathra \dha.sub \na \na.imathra \na.sub \pa
	\pa.imathra \pa.sub \pha \pha.imathra \pha.sub \ba
	\ba.imathra \ba.sub \bha \bha.imathra \bha.sub \ma
	\ma.imathra \ma.sub \ya \ya.imathra \ya.sub \ra.imathra
	\ra.below.ra \rra \rra.imathra \rra.sub \la \la.imathra
	\la.sub \lla \lla.imathra \lla.sub \va \va.imathra \va.sub
	\sha \sha.imathra \sha.sub \sha_ra.imathra \ssa \ssa.imathra
	\ssa.sub \sa \sa.imathra \sa.sub \ha \ha.imathra \ha.sub
	\fa \fa.imathra ];
@GDEF_Mark = [\inherent \ematra \nukta ];

table GDEF {
  # GlyphClassDef @GDEF_Simple, @GDEF_Ligature, @GDEF_Mark, ;
  GlyphClassDef @GDEF_bases, , @GDEF_marks, ;

  LigatureCaretByPos \da 726;
} GDEF;
