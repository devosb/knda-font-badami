// Glyph definitions and rules for codepage 1252 composites
#include "cp1252.gdl"

#include "stddef.gdh"

table(glyph)

	//	Classes
	cls_vowel = ( g_avowel g_aavowel g_ivowel g_iivowel g_uvowel g_uuvowel
		g_rvocalicvowel g_lvocalicvowel g_evowel g_eevowel g_aivowel g_ovowel
		g_oovowel g_auvowel g_rrvocalicvowel g_llvocalicvowel );
	// cls_matraToBase = ( g_aamatra g_ematra g_aumatra g_virama );
	cls_subConsPassMatras = ( g_imatra g_umatra g_uumatra
		g_rvocalicmatra g_rrvocalicmatra g_ematra cMatraToBase);
	cls_rephPassMatras = ( cls_subConsPassMatras g_lengthmark g_ailengthmark );
	// cls_takesLargeEmatra = ( g_nga g_nya g_rra );
	// cls_takesUbasedMatra = ( g_pa g_pa_base g_pha g_pha_base g_va g_va_base );
	// cls_takesLargeRaSubCons = ( g_gha g_cha g_jha g_ddha
	// 	g_tha g_dha g_pha g_bha );
	// cls_akhands = ( g_ka_ssa g_ja_nya );

	// Also in FEAX
	cls_cons = ( cno_sub g_ra cAkhands );
	cls_subCons = ( csub g_ra_below );

endtable; // glyph

table(substitution)

pass(1)

	// For debugging the string "RenderingUnknown" will be rendered as "RenderingGraphite"
	// if the app is using Graphite to render the text.
	codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _ >
	codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  /
		codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

	// akhn
	// Make akhand forms...
	g_ka g_virama g_ssa > _ _ g_ka_ssa:(1 2 3);
	g_ja g_virama g_nya > _ _ g_ja_nya:(1 2 3);

	// ...even if preceded by a future reph...
	g_ra g_virama g_ka g_virama g_ssa > g_ra g_virama _ _ g_ka_ssa:(1 2 3);
	g_ra g_virama g_ja g_virama g_nya > g_ra g_virama _ _ g_ja_nya:(1 2 3);

	// ...but not if they are sub forms
	g_virama g_ka g_virama g_ssa > g_virama g_ka g_virama g_ssa;
	g_virama g_ja g_virama g_nya > g_virama g_ja g_virama g_nya;

	// decompose matras
	_ _ g_oomatra > g_ematra:3 g_uumatra:3 g_lengthmark;
	_ g_omatra > g_ematra:2 g_uumatra;
	_ g_aimatra > g_ematra:2 g_ailengthmark;
	_ g_eematra > g_ematra:2 g_lengthmark;
	_ g_iimatra > g_imatra:2 g_lengthmark;

	// pass ra sub ra sub ra to next pass
	g_ra g_virama g_ra g_virama g_ra > @1 @2 @3 @4 @5;

	// special handling of ra sub ra form
	g_virama g_ra > _ g_ra_below:(1 2) / g_ra _ _;

endpass;

pass(2)

	// rphf

	// advance past consonants in cluster
	g_shortrr _ > _ @1:(1 2) / _ g_virama cls_cons ^ _;

	// advance past matras
	g_shortrr _ > _ @1:(1 2) / _ cls_rephPassMatras ^ _;

	// advance past sub forms
	g_shortrr _ > _ @1:(1 2) / _ cls_subCons ^ _;

	// block ra->reph for virama ra
	g_ra g_virama > @2 @3 / g_virama _ _ cls_cons;

	// initial ra->reph
	g_ra g_virama _ > _ _ g_shortrr:(1 2 3) / _ _ cls_cons ^ _;

endpass;

pass(3)

	// blwf

	// general case
	g_virama cls_cons > _ cls_subCons:(1 2) / cls_cons _ _;
	g_virama cls_cons > _ cls_subCons:(1 2) / cls_subCons _ _;

	// special case for ra
	g_virama g_zwj cls_cons > _ _ cls_subCons:(1 2 3) / g_ra _ _ _;

	// handle general case of ZWNJ and ZWJ
	g_zwnj g_virama cls_cons > _ _ cls_subCons:(1 2 3) / cls_cons _ _ _;
	g_zwj g_virama cls_cons > _ _ cls_subCons:(1 2 3) / cls_cons _ _ _;

	// retroflexion in badaga vowels
	g_virama g_fa > _ g_fa_sub:(1 2) / cls_vowel _ _;

	// sub marks in isolation
	g_zwj g_virama cls_cons > _ _ cls_subCons:(1 2 3) / g_nbspace _ _ _;

endpass;

pass(4)

	// move matras over sub forms

	// one sub form
	cls_cons cls_subCons cls_subConsPassMatras > @1 @3 @2;
	cls_cons cls_subCons cls_subConsPassMatras cls_subConsPassMatras > @1 @3 @4 @2;
	// cls_cons cls_subCons cls_subConsPassMatras cls_subConsPassMatras cls_subConsPassMatras > @1 @3 @4 @5 @2;

	// two sub forms
	cls_cons cls_subCons cls_subCons cls_subConsPassMatras > @1 @4 @2 @3;
	cls_cons cls_subCons cls_subCons cls_subConsPassMatras cls_subConsPassMatras > @1 @4 @5 @2 @3;
	// cls_cons cls_subCons cls_subCons cls_subConsPassMatras cls_subConsPassMatras cls_subConsPassMatras > @1 @4 @5 @6 @2 @3;

endpass;

pass(5)

	// pres

	// some consonants have a multiple base forms (.noEbase and .regbase)
	cno_noEbase > cnoEbase / _ cMatraToBase;
	cno_regbase > cregbase / _ g_ematra g_uumatra;

	// vowel signs AA, AU and haln
	cno_base > cbase / _ cMatraToBase;

	// vowel sign and parts with E (but not for the multiple base consonants)
	cno_base > cbase / _ g_ematra;

	// abvs

	// different E matra
	g_ematra > g_ematra_large / cTakesLargeEmatra _;

	// vowel signs and parts I
	cno_imathra g_imatra  > cimathra:2 _;

endpass;

pass(6)

	// blws
	g_ta_sub g_ya_sub > _ g_ta_ya_below:(1 2);
	g_ta_sub g_va_sub > _ g_ta_va_below:(1 2);
	g_rvocalicmatra g_ka_sub > _ g_ka_rvocalicmatra_below:(1 2);
	g_rvocalicmatra g_ta_sub > _ g_ta_rvocalicmatra_below:(1 2);
	g_ta_sub g_ailengthmark > _ g_ta_ailengthmark_below:(1 2);
	g_ra_below g_ailengthmark > _ g_ra_ailengthmark_below:(1 2);
	g_sha_imathra g_ra_below > _ g_sha_ra_imathra:(1 2);

endpass;

pass(7)

	// psts
	g_umatra > g_umatra_large / cTakesUnderUMatra _;
	g_uumatra > g_uumatra_large / cTakesUnderUMatra g_ematra? _;

	// special handling of ra sub forms
	g_ra_below > g_ra_below_subcons / cls_subCons _;
	g_ra_below > g_ra_below_subcons / cAkhands _;
	g_ra_below > g_ra_below_large / cTakesLargeRaSubCons _;
	g_ra_below > g_ra_below_ra / g_ra_imathra _;
	g_ra_below > g_ra_below_ra / g_ra opt(cls_subConsPassMatras) _;
	g_ra_below > g_ra_below_ra / g_ra_base opt2(cls_subConsPassMatras) _;

endpass;

endtable;
